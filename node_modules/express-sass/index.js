var express = require('express'),
	app = express(),
	sass = require('node-sass'),
	livereload = require('express-livereload'),
	serveIndex = require('serve-index'),
	ssi = require('ssi'),
	opener = require('opener'),
	net = require('net'),
	fs = require('fs'),
	path = require('path'),
	port = 80,
	src = "/wwwroot"

if(process.argv[2]){
	port = process.argv[2]
}

function portIsOccupied (port) {
	// 创建服务并监听该端口
	var server = net.createServer().listen(port)

	server.on('listening', function () { // 执行这块代码说明端口未被占用
		server.close() // 关闭服务
		console.log('端口：' + port + '可用，启动服务器...') // 控制台输出信息
		opener("http://localhost:" + port) 	
		/************************/
		app.get('**/*.shtml',function(req,res,next){  // .shtml 后缀文件 修改header 为html
			var filename = __dirname + src + req.url
			toReload(filename,function(html){
				res.send(html)
			})
		})
		 
		app.get('*.html',function(req,res,next){ // .html 后缀文件如不存在映射到相同文件名的 .shtml文件
			var url = req.url,
		 		filename = path.basename(req.url,'.html'),
		 		dirname = path.dirname(req.url),
		 		base = __dirname + src + dirname + '/' + filename,
		 		file_url = base +".html"
		 	fs.exists(file_url,function(exists){
		 		if(exists){
		 			toReload(base + ".html",function(html){
						res.send(html)
					})
		 		}else{
		 			fs.exists(base + ".shtml",function(exists){
		 				if(exists){
		 					toReload(base + ".shtml",function(html){
								res.send(html)
							})
		 				}else{
		 					res.send("没有找到这个文件哦！！")
		 				}
		 			})
		 		}
		 	})
		})


		app.get('*.css',function(req,res){  // 将.css 文件映射到 .scss上
			var url = req.url;
				url = url.indexOf("?") ? url = url.split("?")[0] : url // 去除livereload时候url后参数
			var	filename = path.basename(url,'.css'),
		 		dirname = path.dirname(url),
		 		base = __dirname + src + dirname + '/' + filename,
		 		scss_url = base + ".scss",
		 		sass_url = base + ".sass",
		 		css_url = base + ".css",
		 		file_url = "";

		 	fs.exists(css_url,function(exists){
		 		if(exists){
		 			fs.readFile(css_url,"utf8",function(err,data){
						if(err){
							console.log(err)
						}else{
							res.setHeader('Content-Type','text/css')
							res.send(data)
						}
					})
		 		}else{
		 			fs.exists(scss_url,function(exists){
		 				if(exists){
		 					file_url = scss_url
		 					getData()
		 				}else{
		 					fs.exists(sass_url,function(exists){
		 						if(exists){
		 							file_url = sass_url
		 							getData()
		 						}else{
		 							res.send("不存在这个css相关文件哦~")
		 						}
		 					})
		 				}
		 			})
		 		}
		 	})

		 	function getData(){
		 		var data = sass.renderSync({
						    file: file_url,
						    //outputStyle: 'compressed'
						})
		 		res.setHeader('Content-Type','text/css')
				res.send(data.css.toString())
		 	}
		})

		app.use(express.static('wwwroot',{ // 静态托管
			setHeaders: function(res,path,start){
				if(res && path.indexOf(".shtml" > -1)){
					res.setHeader("Content-Type","text/html")
				}
			}
		}))

		app.use(serveIndex(__dirname + src,{
			'icons': true
		}))

		app.listen(port,function(){
			console.log('服务器开启成功！端口 :'+port)
		})



		livereload(app, { // 配置 livereload
			applyJSLive: true,
			applyCSSLive: true,
			applyImgLive: true,
			watchDir: __dirname + src
		})

		function toReload(filename,callback){  // 处理html和shtml文件，加入livereload.js并处理ssi语法
			var parser = new ssi(src,src,'**/*.shtml',true)
			fs.exists(filename,function(exists){
				if(exists){
					fs.readFile(filename,"utf8",function(err,data){
						if(err){
							console.log(err)
							callback(err)
						}else{
							var data = parser.parse(filename,data)
							if(data.contents.indexOf("</head>") > -1){
								var html = data.contents.split("</head>")
									html[0] += '<script src="http://localhost:35729/livereload.js"></script></head>'
									html = html[0] + html[1]
							}else{
								var html = data.contents
							}
							callback(html)
						}
					})
				}else{
					callback("木有找到该文件哦~~")
				}
			})
		}
	/**********************/
	})

	server.on('error', function (err) {
		if (err) { // 端口已经被使用
			console.log('端口：' + port + '已被占用，更换其他端口来启动服务。如：node index 3000 ')
		}
	})
}

// 执行
portIsOccupied(port)






